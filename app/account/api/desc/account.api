syntax = "v1"
// `info` 块的内容不会直接生成到 Go 代码中，因为它是 API 的元信息，与具体的业务逻辑无关。
// 生成 Swagger 文档时，`info` 块的内容会被嵌入到 Swagger 文档的 `info` 部分
info(
	title: "账户"
	desc: "账户"
	author: "Mikael"
	email: "12123231@163.com"
	version: "v1"
)
type Empty{}
type (
	GetCaptchaResp {
	// 添加一个json标签，在进行结构体转json时可以将键转成符合json的小写
		CaptchaPic    string `json:"captcha_pic"`
		CaptchaId     string `json:"captcha_id"`
		CaptchaLength int32  `json:"captch_length"`
	}
	RegisterReq {
		Username        string `json:"username"`              //用户名
		Password        string `json:"password"`              //密码
		ConfirmPassword string `json:"confirm_password"`      //确认密码
		PhoneNumber     int64  `json:"phone_number,optional"` //手机号
		Captcha         int64  `json:"captcha,optional"`      //验证
	}
)
type (
	LoginReq {
		Username  string `json:"username"`
		Password  string `json:"password"`
		Captcha   string `json:"captcha"`
		CaptchaId string `json:"captcha_id"`
	}
	LoginResp {
		Uid        int64  `json:"uid"`         //uid
		Username   string `json:"username"`    //用户名
		Token      string `json:"token"`       //token
		ExpireTime int64  `json:"expire_time"` //到期时间
	}
)

type (
	AssetInfo {
		Id           int64  `json:"id"`            //id
		CoinName     string `json:"coin_name"`     //币种名称
		CoinID       int32  `json:"coin_id"`       //币种id
		AvailableQty string `json:"available_qty"` //可用数量
		FrozenQty    string `json:"frozen_qty"`    //冻结数量
	}
	GetUserAssetListResp {
		AssetList []*AssetInfo `json:"asset_list"`
	}
)
type (
	ValidateTokenReq {
		Token string `json:"token"`
	}
	UserInfo {
		Uid      string `json:"uid"`
		Username string `json:"username"`
	}
	ValidateTokenResp {
		UserInfo *UserInfo `json:"user_info"`
	}
)
type (
	AddUserAssetReq {
		CoinName string `json:"coin_name"`
		Qty      string `json:"qty"`
	}
)
// `@server` 的作用**：- 定义服务的全局配置
@server(
    // 添加了一个路由前缀
    // 比如post /get_captcha  returns (GetCaptchaResp)
    // 实际的路由就是/account/v1/get_captcha
    // go-zero会提供一个rest.WithPrefix("/account/v1"), // 全局前缀
	prefix: /account/v1
)

service Account {
	@doc "获取验证码"
	@handler GetCaptcha
	post /get_captcha  returns (GetCaptchaResp)
	@doc "注册"
	@handler Register
	post /register (RegisterReq) returns (Empty)
	@doc "登录"
	@handler Login
	post /login (LoginReq) returns (LoginResp)
	@doc "验证token"
	@handler ValidateToken
	post /validate_token (ValidateTokenReq) returns (ValidateTokenResp)
}

@server(
	prefix: /account/v1
	middleware: Auth
)
service Account {
	@doc "获取用户所有资产"
	@handler GetUserAssetList
	post /get_user_asset_list returns(GetUserAssetListResp)
	@doc "新增用户资产"
	@handler AddUserAsset
	post /add_user_asset(AddUserAssetReq) returns(Empty)
}
